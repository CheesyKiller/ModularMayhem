export module GLAD_4_5;

export import GLAD_4_4;

#if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)
#define APIENTRY __stdcall
#endif

#ifndef APIENTRY
#define APIENTRY
#endif

#ifndef APIENTRYP
#define APIENTRYP APIENTRY *
#endif

#ifndef GLAPIENTRY
#define GLAPIENTRY APIENTRY
#endif

export using PFNGLCLIPCONTROLPROC = void (APIENTRYP)(GLenum origin, GLenum depth);
export using PFNGLCREATETRANSFORMFEEDBACKSPROC = void (APIENTRYP)(GLsizei n, GLuint* ids);
export using PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC = void (APIENTRYP)(GLuint xfb, GLuint index, GLuint buffer);
export using PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC = void (APIENTRYP)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
export using PFNGLGETTRANSFORMFEEDBACKIVPROC = void (APIENTRYP)(GLuint xfb, GLenum pname, GLint* param);
export using PFNGLGETTRANSFORMFEEDBACKI_VPROC = void (APIENTRYP)(GLuint xfb, GLenum pname, GLuint index, GLint* param);
export using PFNGLGETTRANSFORMFEEDBACKI64_VPROC = void (APIENTRYP)(GLuint xfb, GLenum pname, GLuint index, GLint64* param);
export using PFNGLCREATEBUFFERSPROC = void (APIENTRYP)(GLsizei n, GLuint* buffers);
export using PFNGLNAMEDBUFFERSTORAGEPROC = void (APIENTRYP)(GLuint buffer, GLsizeiptr size, const void* data, GLbitfield flags);
export using PFNGLNAMEDBUFFERDATAPROC = void (APIENTRYP)(GLuint buffer, GLsizeiptr size, const void* data, GLenum usage);
export using PFNGLNAMEDBUFFERSUBDATAPROC = void (APIENTRYP)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data);
export using PFNGLCOPYNAMEDBUFFERSUBDATAPROC = void (APIENTRYP)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
export using PFNGLCLEARNAMEDBUFFERDATAPROC = void (APIENTRYP)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void* data);
export using PFNGLCLEARNAMEDBUFFERSUBDATAPROC = void (APIENTRYP)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data);
export using PFNGLMAPNAMEDBUFFERPROC = void* (*)(GLuint buffer, GLenum access);
export using PFNGLMAPNAMEDBUFFERRANGEPROC = void* (*)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
export using PFNGLUNMAPNAMEDBUFFERPROC = GLboolean(*)(GLuint buffer);
export using PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC = void (APIENTRYP)(GLuint buffer, GLintptr offset, GLsizeiptr length);
export using PFNGLGETNAMEDBUFFERPARAMETERIVPROC = void (APIENTRYP)(GLuint buffer, GLenum pname, GLint* params);
export using PFNGLGETNAMEDBUFFERPARAMETERI64VPROC = void (APIENTRYP)(GLuint buffer, GLenum pname, GLint64* params);
export using PFNGLGETNAMEDBUFFERPOINTERVPROC = void (APIENTRYP)(GLuint buffer, GLenum pname, void** params);
export using PFNGLGETNAMEDBUFFERSUBDATAPROC = void (APIENTRYP)(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data);
export using PFNGLCREATEFRAMEBUFFERSPROC = void (APIENTRYP)(GLsizei n, GLuint* framebuffers);
export using PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC = void (APIENTRYP)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
export using PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC = void (APIENTRYP)(GLuint framebuffer, GLenum pname, GLint param);
export using PFNGLNAMEDFRAMEBUFFERTEXTUREPROC = void (APIENTRYP)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
export using PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC = void (APIENTRYP)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
export using PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC = void (APIENTRYP)(GLuint framebuffer, GLenum buf);
export using PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC = void (APIENTRYP)(GLuint framebuffer, GLsizei n, const GLenum* bufs);
export using PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC = void (APIENTRYP)(GLuint framebuffer, GLenum src);
export using PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC = void (APIENTRYP)(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments);
export using PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC = void (APIENTRYP)(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
export using PFNGLCLEARNAMEDFRAMEBUFFERIVPROC = void (APIENTRYP)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint* value);
export using PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC = void (APIENTRYP)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint* value);
export using PFNGLCLEARNAMEDFRAMEBUFFERFVPROC = void (APIENTRYP)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat* value);
export using PFNGLCLEARNAMEDFRAMEBUFFERFIPROC = void (APIENTRYP)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
export using PFNGLBLITNAMEDFRAMEBUFFERPROC = void (APIENTRYP)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
export using PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC = GLenum(*)(GLuint framebuffer, GLenum target);
export using PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC = void (APIENTRYP)(GLuint framebuffer, GLenum pname, GLint* param);
export using PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC = void (APIENTRYP)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params);
export using PFNGLCREATERENDERBUFFERSPROC = void (APIENTRYP)(GLsizei n, GLuint* renderbuffers);
export using PFNGLNAMEDRENDERBUFFERSTORAGEPROC = void (APIENTRYP)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
export using PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC = void (APIENTRYP)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
export using PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC = void (APIENTRYP)(GLuint renderbuffer, GLenum pname, GLint* params);
export using PFNGLCREATETEXTURESPROC = void (APIENTRYP)(GLenum target, GLsizei n, GLuint* textures);
export using PFNGLTEXTUREBUFFERPROC = void (APIENTRYP)(GLuint texture, GLenum internalformat, GLuint buffer);
export using PFNGLTEXTUREBUFFERRANGEPROC = void (APIENTRYP)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
export using PFNGLTEXTURESTORAGE1DPROC = void (APIENTRYP)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
export using PFNGLTEXTURESTORAGE2DPROC = void (APIENTRYP)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
export using PFNGLTEXTURESTORAGE3DPROC = void (APIENTRYP)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
export using PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC = void (APIENTRYP)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
export using PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC = void (APIENTRYP)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
export using PFNGLTEXTURESUBIMAGE1DPROC = void (APIENTRYP)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
export using PFNGLTEXTURESUBIMAGE2DPROC = void (APIENTRYP)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
export using PFNGLTEXTURESUBIMAGE3DPROC = void (APIENTRYP)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
export using PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC = void (APIENTRYP)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
export using PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC = void (APIENTRYP)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
export using PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC = void (APIENTRYP)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
export using PFNGLCOPYTEXTURESUBIMAGE1DPROC = void (APIENTRYP)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
export using PFNGLCOPYTEXTURESUBIMAGE2DPROC = void (APIENTRYP)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
export using PFNGLCOPYTEXTURESUBIMAGE3DPROC = void (APIENTRYP)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
export using PFNGLTEXTUREPARAMETERFPROC = void (APIENTRYP)(GLuint texture, GLenum pname, GLfloat param);
export using PFNGLTEXTUREPARAMETERFVPROC = void (APIENTRYP)(GLuint texture, GLenum pname, const GLfloat* param);
export using PFNGLTEXTUREPARAMETERIPROC = void (APIENTRYP)(GLuint texture, GLenum pname, GLint param);
export using PFNGLTEXTUREPARAMETERIIVPROC = void (APIENTRYP)(GLuint texture, GLenum pname, const GLint* params);
export using PFNGLTEXTUREPARAMETERIUIVPROC = void (APIENTRYP)(GLuint texture, GLenum pname, const GLuint* params);
export using PFNGLTEXTUREPARAMETERIVPROC = void (APIENTRYP)(GLuint texture, GLenum pname, const GLint* param);
export using PFNGLGENERATETEXTUREMIPMAPPROC = void (APIENTRYP)(GLuint texture);
export using PFNGLBINDTEXTUREUNITPROC = void (APIENTRYP)(GLuint unit, GLuint texture);
export using PFNGLGETTEXTUREIMAGEPROC = void (APIENTRYP)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
export using PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC = void (APIENTRYP)(GLuint texture, GLint level, GLsizei bufSize, void* pixels);
export using PFNGLGETTEXTURELEVELPARAMETERFVPROC = void (APIENTRYP)(GLuint texture, GLint level, GLenum pname, GLfloat* params);
export using PFNGLGETTEXTURELEVELPARAMETERIVPROC = void (APIENTRYP)(GLuint texture, GLint level, GLenum pname, GLint* params);
export using PFNGLGETTEXTUREPARAMETERFVPROC = void (APIENTRYP)(GLuint texture, GLenum pname, GLfloat* params);
export using PFNGLGETTEXTUREPARAMETERIIVPROC = void (APIENTRYP)(GLuint texture, GLenum pname, GLint* params);
export using PFNGLGETTEXTUREPARAMETERIUIVPROC = void (APIENTRYP)(GLuint texture, GLenum pname, GLuint* params);
export using PFNGLGETTEXTUREPARAMETERIVPROC = void (APIENTRYP)(GLuint texture, GLenum pname, GLint* params);
export using PFNGLCREATEVERTEXARRAYSPROC = void (APIENTRYP)(GLsizei n, GLuint* arrays);
export using PFNGLDISABLEVERTEXARRAYATTRIBPROC = void (APIENTRYP)(GLuint vaobj, GLuint index);
export using PFNGLENABLEVERTEXARRAYATTRIBPROC = void (APIENTRYP)(GLuint vaobj, GLuint index);
export using PFNGLVERTEXARRAYELEMENTBUFFERPROC = void (APIENTRYP)(GLuint vaobj, GLuint buffer);
export using PFNGLVERTEXARRAYVERTEXBUFFERPROC = void (APIENTRYP)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
export using PFNGLVERTEXARRAYVERTEXBUFFERSPROC = void (APIENTRYP)(GLuint vaobj, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides);
export using PFNGLVERTEXARRAYATTRIBBINDINGPROC = void (APIENTRYP)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
export using PFNGLVERTEXARRAYATTRIBFORMATPROC = void (APIENTRYP)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
export using PFNGLVERTEXARRAYATTRIBIFORMATPROC = void (APIENTRYP)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
export using PFNGLVERTEXARRAYATTRIBLFORMATPROC = void (APIENTRYP)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
export using PFNGLVERTEXARRAYBINDINGDIVISORPROC = void (APIENTRYP)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
export using PFNGLGETVERTEXARRAYIVPROC = void (APIENTRYP)(GLuint vaobj, GLenum pname, GLint* param);
export using PFNGLGETVERTEXARRAYINDEXEDIVPROC = void (APIENTRYP)(GLuint vaobj, GLuint index, GLenum pname, GLint* param);
export using PFNGLGETVERTEXARRAYINDEXED64IVPROC = void (APIENTRYP)(GLuint vaobj, GLuint index, GLenum pname, GLint64* param);
export using PFNGLCREATESAMPLERSPROC = void (APIENTRYP)(GLsizei n, GLuint* samplers);
export using PFNGLCREATEPROGRAMPIPELINESPROC = void (APIENTRYP)(GLsizei n, GLuint* pipelines);
export using PFNGLCREATEQUERIESPROC = void (APIENTRYP)(GLenum target, GLsizei n, GLuint* ids);
export using PFNGLGETQUERYBUFFEROBJECTI64VPROC = void (APIENTRYP)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
export using PFNGLGETQUERYBUFFEROBJECTIVPROC = void (APIENTRYP)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
export using PFNGLGETQUERYBUFFEROBJECTUI64VPROC = void (APIENTRYP)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
export using PFNGLGETQUERYBUFFEROBJECTUIVPROC = void (APIENTRYP)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
export using PFNGLMEMORYBARRIERBYREGIONPROC = void (APIENTRYP)(GLbitfield barriers);
export using PFNGLGETTEXTURESUBIMAGEPROC = void (APIENTRYP)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
export using PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC = void (APIENTRYP)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void* pixels);
export using PFNGLGETGRAPHICSRESETSTATUSPROC = GLenum(*)(void);
export using PFNGLGETNCOMPRESSEDTEXIMAGEPROC = void (APIENTRYP)(GLenum target, GLint lod, GLsizei bufSize, void* pixels);
export using PFNGLGETNTEXIMAGEPROC = void (APIENTRYP)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
export using PFNGLGETNUNIFORMDVPROC = void (APIENTRYP)(GLuint program, GLint location, GLsizei bufSize, GLdouble* params);
export using PFNGLGETNUNIFORMFVPROC = void (APIENTRYP)(GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
export using PFNGLGETNUNIFORMIVPROC = void (APIENTRYP)(GLuint program, GLint location, GLsizei bufSize, GLint* params);
export using PFNGLGETNUNIFORMUIVPROC = void (APIENTRYP)(GLuint program, GLint location, GLsizei bufSize, GLuint* params);
export using PFNGLREADNPIXELSPROC = void (APIENTRYP)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);
export using PFNGLGETNMAPDVPROC = void (APIENTRYP)(GLenum target, GLenum query, GLsizei bufSize, GLdouble* v);
export using PFNGLGETNMAPFVPROC = void (APIENTRYP)(GLenum target, GLenum query, GLsizei bufSize, GLfloat* v);
export using PFNGLGETNMAPIVPROC = void (APIENTRYP)(GLenum target, GLenum query, GLsizei bufSize, GLint* v);
export using PFNGLGETNPIXELMAPFVPROC = void (APIENTRYP)(GLenum map, GLsizei bufSize, GLfloat* values);
export using PFNGLGETNPIXELMAPUIVPROC = void (APIENTRYP)(GLenum map, GLsizei bufSize, GLuint* values);
export using PFNGLGETNPIXELMAPUSVPROC = void (APIENTRYP)(GLenum map, GLsizei bufSize, GLushort* values);
export using PFNGLGETNPOLYGONSTIPPLEPROC = void (APIENTRYP)(GLsizei bufSize, GLubyte* pattern);
export using PFNGLGETNCOLORTABLEPROC = void (APIENTRYP)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table);
export using PFNGLGETNCONVOLUTIONFILTERPROC = void (APIENTRYP)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image);
export using PFNGLGETNSEPARABLEFILTERPROC = void (APIENTRYP)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span);
export using PFNGLGETNHISTOGRAMPROC = void (APIENTRYP)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
export using PFNGLGETNMINMAXPROC = void (APIENTRYP)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
export using PFNGLTEXTUREBARRIERPROC = void (APIENTRYP)(void);

// Export the function pointers
export extern PFNGLCLIPCONTROLPROC glClipControl;
export extern PFNGLCREATETRANSFORMFEEDBACKSPROC glCreateTransformFeedbacks;
export extern PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glTransformFeedbackBufferBase;
export extern PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glTransformFeedbackBufferRange;
export extern PFNGLGETTRANSFORMFEEDBACKIVPROC glGetTransformFeedbackiv;
export extern PFNGLGETTRANSFORMFEEDBACKI_VPROC glGetTransformFeedbacki_v;
export extern PFNGLGETTRANSFORMFEEDBACKI64_VPROC glGetTransformFeedbacki64_v;
export extern PFNGLCREATEBUFFERSPROC glCreateBuffers;
export extern PFNGLNAMEDBUFFERSTORAGEPROC glNamedBufferStorage;
export extern PFNGLNAMEDBUFFERDATAPROC glNamedBufferData;
export extern PFNGLNAMEDBUFFERSUBDATAPROC glNamedBufferSubData;
export extern PFNGLCOPYNAMEDBUFFERSUBDATAPROC glCopyNamedBufferSubData;
export extern PFNGLCLEARNAMEDBUFFERDATAPROC glClearNamedBufferData;
export extern PFNGLCLEARNAMEDBUFFERSUBDATAPROC glClearNamedBufferSubData;
export extern PFNGLMAPNAMEDBUFFERPROC glMapNamedBuffer;
export extern PFNGLMAPNAMEDBUFFERRANGEPROC glMapNamedBufferRange;
export extern PFNGLUNMAPNAMEDBUFFERPROC glUnmapNamedBuffer;
export extern PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glFlushMappedNamedBufferRange;
export extern PFNGLGETNAMEDBUFFERPARAMETERIVPROC glGetNamedBufferParameteriv;
export extern PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glGetNamedBufferParameteri64v;
export extern PFNGLGETNAMEDBUFFERPOINTERVPROC glGetNamedBufferPointerv;
export extern PFNGLGETNAMEDBUFFERSUBDATAPROC glGetNamedBufferSubData;
export extern PFNGLCREATEFRAMEBUFFERSPROC glCreateFramebuffers;
export extern PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glNamedFramebufferRenderbuffer;
export extern PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glNamedFramebufferParameteri;
export extern PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glNamedFramebufferTexture;
export extern PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glNamedFramebufferTextureLayer;
export extern PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glNamedFramebufferDrawBuffer;
export extern PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glNamedFramebufferDrawBuffers;
export extern PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glNamedFramebufferReadBuffer;
export extern PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glInvalidateNamedFramebufferData;
export extern PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glInvalidateNamedFramebufferSubData;
export extern PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glClearNamedFramebufferiv;
export extern PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glClearNamedFramebufferuiv;
export extern PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glClearNamedFramebufferfv;
export extern PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glClearNamedFramebufferfi;
export extern PFNGLBLITNAMEDFRAMEBUFFERPROC glBlitNamedFramebuffer;
export extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glCheckNamedFramebufferStatus;
export extern PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glGetNamedFramebufferParameteriv;
export extern PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetNamedFramebufferAttachmentParameteriv;
export extern PFNGLCREATERENDERBUFFERSPROC glCreateRenderbuffers;
export extern PFNGLNAMEDRENDERBUFFERSTORAGEPROC glNamedRenderbufferStorage;
export extern PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glNamedRenderbufferStorageMultisample;
export extern PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glGetNamedRenderbufferParameteriv;
export extern PFNGLCREATETEXTURESPROC glCreateTextures;
export extern PFNGLTEXTUREBUFFERPROC glTextureBuffer;
export extern PFNGLTEXTUREBUFFERRANGEPROC glTextureBufferRange;
export extern PFNGLTEXTURESTORAGE1DPROC glTextureStorage1D;
export extern PFNGLTEXTURESTORAGE2DPROC glTextureStorage2D;
export extern PFNGLTEXTURESTORAGE3DPROC glTextureStorage3D;
export extern PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glTextureStorage2DMultisample;
export extern PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glTextureStorage3DMultisample;
export extern PFNGLTEXTURESUBIMAGE1DPROC glTextureSubImage1D;
export extern PFNGLTEXTURESUBIMAGE2DPROC glTextureSubImage2D;
export extern PFNGLTEXTURESUBIMAGE3DPROC glTextureSubImage3D;
export extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glCompressedTextureSubImage1D;
export extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glCompressedTextureSubImage2D;
export extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glCompressedTextureSubImage3D;
export extern PFNGLCOPYTEXTURESUBIMAGE1DPROC glCopyTextureSubImage1D;
export extern PFNGLCOPYTEXTURESUBIMAGE2DPROC glCopyTextureSubImage2D;
export extern PFNGLCOPYTEXTURESUBIMAGE3DPROC glCopyTextureSubImage3D;
export extern PFNGLTEXTUREPARAMETERFPROC glTextureParameterf;
export extern PFNGLTEXTUREPARAMETERFVPROC glTextureParameterfv;
export extern PFNGLTEXTUREPARAMETERIPROC glTextureParameteri;
export extern PFNGLTEXTUREPARAMETERIIVPROC glTextureParameterIiv;
export extern PFNGLTEXTUREPARAMETERIUIVPROC glTextureParameterIuiv;
export extern PFNGLTEXTUREPARAMETERIVPROC glTextureParameteriv;
export extern PFNGLGENERATETEXTUREMIPMAPPROC glGenerateTextureMipmap;
export extern PFNGLBINDTEXTUREUNITPROC glBindTextureUnit;
export extern PFNGLGETTEXTUREIMAGEPROC glGetTextureImage;
export extern PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glGetCompressedTextureImage;
export extern PFNGLGETTEXTURELEVELPARAMETERFVPROC glGetTextureLevelParameterfv;
export extern PFNGLGETTEXTURELEVELPARAMETERIVPROC glGetTextureLevelParameteriv;
export extern PFNGLGETTEXTUREPARAMETERFVPROC glGetTextureParameterfv;
export extern PFNGLGETTEXTUREPARAMETERIIVPROC glGetTextureParameterIiv;
export extern PFNGLGETTEXTUREPARAMETERIUIVPROC glGetTextureParameterIuiv;
export extern PFNGLGETTEXTUREPARAMETERIVPROC glGetTextureParameteriv;
export extern PFNGLCREATEVERTEXARRAYSPROC glCreateVertexArrays;
export extern PFNGLDISABLEVERTEXARRAYATTRIBPROC glDisableVertexArrayAttrib;
export extern PFNGLENABLEVERTEXARRAYATTRIBPROC glEnableVertexArrayAttrib;
export extern PFNGLVERTEXARRAYELEMENTBUFFERPROC glVertexArrayElementBuffer;
export extern PFNGLVERTEXARRAYVERTEXBUFFERPROC glVertexArrayVertexBuffer;
export extern PFNGLVERTEXARRAYVERTEXBUFFERSPROC glVertexArrayVertexBuffers;
export extern PFNGLVERTEXARRAYATTRIBBINDINGPROC glVertexArrayAttribBinding;
export extern PFNGLVERTEXARRAYATTRIBFORMATPROC glVertexArrayAttribFormat;
export extern PFNGLVERTEXARRAYATTRIBIFORMATPROC glVertexArrayAttribIFormat;
export extern PFNGLVERTEXARRAYATTRIBLFORMATPROC glVertexArrayAttribLFormat;
export extern PFNGLVERTEXARRAYBINDINGDIVISORPROC glVertexArrayBindingDivisor;
export extern PFNGLGETVERTEXARRAYIVPROC glGetVertexArrayiv;
export extern PFNGLGETVERTEXARRAYINDEXEDIVPROC glGetVertexArrayIndexediv;
export extern PFNGLGETVERTEXARRAYINDEXED64IVPROC glGetVertexArrayIndexed64iv;
export extern PFNGLCREATESAMPLERSPROC glCreateSamplers;
export extern PFNGLCREATEPROGRAMPIPELINESPROC glCreateProgramPipelines;
export extern PFNGLCREATEQUERIESPROC glCreateQueries;
export extern PFNGLGETQUERYBUFFEROBJECTI64VPROC glGetQueryBufferObjecti64v;
export extern PFNGLGETQUERYBUFFEROBJECTIVPROC glGetQueryBufferObjectiv;
export extern PFNGLGETQUERYBUFFEROBJECTUI64VPROC glGetQueryBufferObjectui64v;
export extern PFNGLGETQUERYBUFFEROBJECTUIVPROC glGetQueryBufferObjectuiv;
export extern PFNGLMEMORYBARRIERBYREGIONPROC glMemoryBarrierByRegion;
export extern PFNGLGETTEXTURESUBIMAGEPROC glGetTextureSubImage;
export extern PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glGetCompressedTextureSubImage;
export extern PFNGLGETGRAPHICSRESETSTATUSPROC glGetGraphicsResetStatus;
export extern PFNGLGETNCOMPRESSEDTEXIMAGEPROC glGetnCompressedTexImage;
export extern PFNGLGETNTEXIMAGEPROC glGetnTexImage;
export extern PFNGLGETNUNIFORMDVPROC glGetnUniformdv;
export extern PFNGLGETNUNIFORMFVPROC glGetnUniformfv;
export extern PFNGLGETNUNIFORMIVPROC glGetnUniformiv;
export extern PFNGLGETNUNIFORMUIVPROC glGetnUniformuiv;
export extern PFNGLREADNPIXELSPROC glReadnPixels;
export extern PFNGLGETNMAPDVPROC glGetnMapdv;
export extern PFNGLGETNMAPFVPROC glGetnMapfv;
export extern PFNGLGETNMAPIVPROC glGetnMapiv;
export extern PFNGLGETNPIXELMAPFVPROC glGetnPixelMapfv;
export extern PFNGLGETNPIXELMAPUIVPROC glGetnPixelMapuiv;
export extern PFNGLGETNPIXELMAPUSVPROC glGetnPixelMapusv;
export extern PFNGLGETNPOLYGONSTIPPLEPROC glGetnPolygonStipple;
export extern PFNGLGETNCOLORTABLEPROC glGetnColorTable;
export extern PFNGLGETNCONVOLUTIONFILTERPROC glGetnConvolutionFilter;
export extern PFNGLGETNSEPARABLEFILTERPROC glGetnSeparableFilter;
export extern PFNGLGETNHISTOGRAMPROC glGetnHistogram;
export extern PFNGLGETNMINMAXPROC glGetnMinmax;
export extern PFNGLTEXTUREBARRIERPROC glTextureBarrier;

export namespace GLAD_4_5 {
	export void load_GL_RECURSIVE(GLADloadproc);
}